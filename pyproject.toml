[tool.poetry]
name = "readai"
version = "0.1.0"
description = "基于电子书的智能阅读助手后端服务"
authors = ["Cuber-final"]

[tool.poetry.dependencies]
python = ">=3.10,<3.13"
uvicorn = "^0.23.2"
pydantic = "^2.4.2"
pydantic-settings = "^2.0.3"
python-dotenv = "^1.0.0"
sqlalchemy = "^2.0.22"
transformers = "^4.34.1"
ebooklib = "^0.18"
html2text = "^2024.2.26"
pypdf = "^5.1.0"
alembic = "^1.12.1"
httpx = ">=0.27.0,<0.29.0"
numpy = "^2.2.4"
loguru = "^0.7.3"
injector = "^0.22.0"
torch = "^2.6.0"
huggingface-hub = "^0.30.2"
fastapi = "^0.115.12"

# LlamaIndex libs
llama-index = ">=0.10.44,<0.12.26"
llama-index-core = "^0.12.25"
llama-index-embeddings-ollama = "^0.6.0"
llama-index-llms-deepseek = "^0.1.1"
llama-index-vector-stores-qdrant = "^0.6.0"
qdrant-client = "^1.13.3"
mlflow = ">=2.15"
langchain-community = "^0.3.20"
unstructured = "^0.17.2"
pypandoc = "^1.15"
markitdown = {extras = ["pdf"], version = "^0.1.1"}
spacy = "^3.8.5"
llama-index-retrievers-bm25 = "^0.5.2"
rank-bm25 = "^0.2.2"
llama-index-embeddings-huggingface = "^0.5.2"
jieba = "^0.42.1"
llama-index-postprocessor-flag-embedding-reranker = "^0.3.0"
flagembedding = "^1.3.4"

# Optional LlamaIndex integration libs
llama-index-llms-openai-like = {version = "*",optional = true}
llama-index-llms-ollama = {version = "*",optional = true}
sentence-transformers = {version ="*", optional = true}
sse-starlette = "^2.2.1"


[tool.poetry.extras]
llms-openai-like = ["llama-index-llms-openai-like"]
llms-ollama = ["llama-index-llms-ollama"]
llms-vllm = ["llama-index-llms-vllm"]
embeddings-huggingface = ["llama-index-embeddings-huggingface", "einops"]
vector-stores-chroma = ["llama-index-vector-stores-chroma"]
rerank-sentence-transformers = ["sentence-transformers"]

[tool.poetry.group.dev.dependencies]
black = "^23.10.0"
isort = "^5.12.0"
mypy = "^1.6.1"
ruff = "^0"
pytest-cov = "^5"
pytest = "^8.2"
pytest-asyncio = "^0.24.0"
notebook = "^7.3.3"
ipywidgets = "^8.1.5"
arize-phoenix = "^8.20.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

## ruff
[tool.ruff]
target-version = 'py310'

[tool.black]
line-length = 88

[tool.ruff.lint]
# 选择启用的规则集合
select = [
    "E",    # pycodestyle 错误
    "W",    # pycodestyle 警告
    "F",    # Pyflakes
    "B",    # flake8-bugbear
    "I",    # isort
    "D",    # pydocstyle
    "UP",   # pyupgrade
    "S",    # flake8-bandit
    "C4",   # flake8-comprehensions
    "SIM",  # flake8-simplify
    "Q",    # flake8-quotes
    "TCH",  # flake8-type-checking
    "PT",   # flake8-pytest-style
    "RUF",  # Ruff 特有规则
]

# 忽略特定规则
ignore = [
    "E501",   # 忽略行长度限制，由 Black 处理
    "D100",   # 忽略缺少模块级别的 docstring
    "D101",   # 忽略缺少类的 docstring
    "D102",   # 忽略缺少方法的 docstring
    "D103",   # 忽略缺少函数的 docstring
    "D104",   # 忽略缺少包的 docstring
    "D105",   # 忽略缺少魔术方法的 docstring
    "D106",   # 忽略缺少嵌套类的 docstring
    "D107",   # 忽略缺少 __init__ 方法的 docstring
    "B008",   # 忽略函数调用作为默认参数的警告，适用于 FastAPI 的 Depends
    "S101",   # 忽略使用 assert 的警告，测试代码中常用
    "PT011",  # 忽略 pytest.raises() 应指定预期异常的警告
    "D415"
]

[tool.ruff.lint.pydocstyle]
convention = "google"